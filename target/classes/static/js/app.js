// API Base URL
const API_BASE = '/api';

// Utility Functions
function showLoading(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.innerHTML = '<div class="loading"></div> <span>Î°úÎî© Ï§ë...</span>';
    }
}

function showError(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
        element.innerHTML = `
            <div class="api-card">
                <div class="status error">Ïò§Î•ò</div>
                <h3>API Ìò∏Ï∂ú Ïã§Ìå®</h3>
                <p>${message}</p>
            </div>
        `;
    }
}

function showSuccess(elementId, title, data) {
    const element = document.getElementById(elementId);
    if (element) {
        element.innerHTML = `
            <div class="api-card">
                <div class="status success">ÏÑ±Í≥µ</div>
                <h3>${title}</h3>
                <div class="json-display">${JSON.stringify(data, null, 2)}</div>
            </div>
        `;
    }
}

// API Functions
async function fetchAPI(url, options = {}) {
    try {
        const response = await fetch(`${API_BASE}${url}`, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
        throw error;
    }
}

// Load Categories
async function loadCategories() {
    showLoading('categories-container');
    
    try {
        const data = await fetchAPI('/catalog/categories');
        showSuccess('categories-container', 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù', data);
    } catch (error) {
        showError('categories-container', error.message);
    }
}

// Load Products
async function loadProducts(categoryId = null) {
    showLoading('categories-container');
    
    try {
        const url = categoryId ? `/catalog/products?categoryId=${categoryId}` : '/catalog/products';
        const data = await fetchAPI(url);
        showSuccess('categories-container', 'ÏÉÅÌíà Î™©Î°ù', data);
    } catch (error) {
        showError('categories-container', error.message);
    }
}

// Load Cart
async function loadCart(customerId) {
    showLoading('cart-container');
    
    try {
        const data = await fetchAPI(`/cart/${customerId}`);
        showSuccess('cart-container', `Í≥†Í∞ù ${customerId}Ïùò Ïû•Î∞îÍµ¨Îãà`, data);
    } catch (error) {
        showError('cart-container', error.message);
    }
}

// Load Orders
async function loadOrders(customerId) {
    showLoading('orders-container');
    
    try {
        const data = await fetchAPI(`/orders/customer/${customerId}`);
        showSuccess('orders-container', `Í≥†Í∞ù ${customerId}Ïùò Ï£ºÎ¨∏ ÎÇ¥Ïó≠`, data);
    } catch (error) {
        showError('orders-container', error.message);
    }
}

// Add to Cart
async function addToCart(customerId, skuId, quantity = 1) {
    try {
        const data = await fetchAPI(`/cart/${customerId}/items`, {
            method: 'POST',
            body: JSON.stringify({
                skuId: skuId,
                quantity: quantity
            })
        });
        
        alert('ÏÉÅÌíàÏù¥ Ïû•Î∞îÍµ¨ÎãàÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!');
        loadCart(customerId); // Ïû•Î∞îÍµ¨Îãà ÏÉàÎ°úÍ≥†Ïπ®
        return data;
    } catch (error) {
        alert(`Ïû•Î∞îÍµ¨Îãà Ï∂îÍ∞Ä Ïã§Ìå®: ${error.message}`);
        throw error;
    }
}

// Create Order
async function createOrder(customerId, shippingAddress, billingAddress, notes = '') {
    try {
        const data = await fetchAPI(`/orders/customer/${customerId}`, {
            method: 'POST',
            body: JSON.stringify({
                shippingAddress: shippingAddress,
                billingAddress: billingAddress,
                notes: notes
            })
        });
        
        alert('Ï£ºÎ¨∏Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
        loadOrders(customerId); // Ï£ºÎ¨∏ ÎÇ¥Ïó≠ ÏÉàÎ°úÍ≥†Ïπ®
        return data;
    } catch (error) {
        alert(`Ï£ºÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®: ${error.message}`);
        throw error;
    }
}

// Health Check
async function checkHealth() {
    try {
        const data = await fetchAPI('/actuator/health');
        console.log('Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú:', data);
        return data;
    } catch (error) {
        console.error('Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®:', error);
        return null;
    }
}

// Demo Functions
function runDemo() {
    console.log('üöÄ E-commerce Platform Demo ÏãúÏûë');
    
    // Ìó¨Ïä§ Ï≤¥ÌÅ¨
    checkHealth().then(health => {
        if (health) {
            console.log('‚úÖ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï†ïÏÉÅ ÏûëÎèô');
        } else {
            console.log('‚ùå Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î¨∏Ï†ú ÏûàÏùå');
        }
    });
    
    // ÏûêÎèôÏúºÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎìú
    setTimeout(() => {
        loadCategories();
    }, 1000);
}

// Navigation
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth' });
    }
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéâ E-commerce Platform UI Î°úÎìú ÏôÑÎ£å');
    
    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÎßÅÌÅ¨ Ïù¥Î≤§Ìä∏
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            const href = this.getAttribute('href');
            if (href.startsWith('#')) {
                e.preventDefault();
                scrollToSection(href.substring(1));
            }
        });
    });
    
    // Îç∞Î™® Ïã§Ìñâ
    runDemo();
    
    // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    // setInterval(() => {
    //     checkHealth();
    // }, 30000); // 30Ï¥àÎßàÎã§ Ìó¨Ïä§ Ï≤¥ÌÅ¨
});

// Export for global use
window.loadCategories = loadCategories;
window.loadProducts = loadProducts;
window.loadCart = loadCart;
window.loadOrders = loadOrders;
window.addToCart = addToCart;
window.createOrder = createOrder;
window.checkHealth = checkHealth;
